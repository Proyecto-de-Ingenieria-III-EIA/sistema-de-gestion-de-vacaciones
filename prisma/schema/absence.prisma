model Absence {
    dbId           String @id @default(cuid()) @map("db_id")
    colaboratorId   String @map("colaborator_id")
    startDate      DateTime @map("start_date")
    endDate        DateTime @map("end_date")

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relation with User table
    colaborator  User @relation("Absence_Colaborator", fields: [colaboratorId], references: [id], map: "absence_colaborator_fk")

    // Inverse relation with Requested_Absence table 
    requestedAbsence Requested_Absence? @relation("Parent_Absence")
    // Inverse relation with Spontaneous_Absence table
    spontaneousAbsence Spontaneous_Absence? @relation("Spontaneous_Absence")
}

model Requested_Absence {
  absenceId    String   @id @default(cuid()) @map("absence_id")
  status        String  @map("status")
  aprover       String @map("aprover")
  decisionDate DateTime @map("decision_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Absence table relation
  absence Absence @relation("Parent_Absence", fields: [absenceId], references: [dbId], map: "requested_absence_fk")
  // Status table relation
  currentStatus Request_Status @relation("Requested_Absence_Status", fields: [status], references: [dbId], map: "requested_absence_status_fk")
  // User table relation
  aproverUser User @relation("Requested_Absence_Aprover", fields: [aprover], references: [id], map: "requested_absence_aprover_fk")
  
  // Inverse relation with Vacation_Absence
  vacationAbsence Vacation_Absence? @relation("Requested_Absence")
  // Inverse relation with Informal_Absence
  informalAbsence Informal_Absence? @relation("Informal_Absence")
}

model Vacation_Absence {
  absenceId    String   @id @map("absence_id")
  policyUnder  String  @map("policy_under")

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Absence table relation
  requestedAbsence Requested_Absence @relation("Requested_Absence", fields: [absenceId], references: [absenceId], map: "vacation_absence_fk")
  // Vacation_Policy table relation
  policy Vacation_Policy @relation("Vacation_Policy", fields: [policyUnder], references: [dbId], map: "vacation_policy_fk")
}

model Informal_Absence {
  absenceId String @id @map("absence_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relation with Requested_Absence
  requestedAbsence Requested_Absence @relation("Informal_Absence", fields: [absenceId], references: [absenceId], map: "informal_absence_fk")

  // Inverse relation with Justification
  justifications Justification? @relation("Informal_Absence_Justification")
}

model Absence_Status {
  dbId String @id() @default(cuid()) @map("db_id")
  name String @map("name")
  description String @map("description")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relation with Requested_Absence
  spontaneousAbsence Spontaneous_Absence[] @relation("Spontaneous_Absence_Status")
}

model Spontaneous_Absence {
  absenceId String @id @map("absence_id")
  comments String @map("comments") 
  absenceStatus String @map("absence_status")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  // Relation with Absence
  parentAbsence Absence @relation("Spontaneous_Absence", fields: [absenceId], references: [dbId], map: "spontaneous_absence_fk")

  // Relation with Absence_Status
  status Absence_Status @relation("Spontaneous_Absence_Status", fields: [absenceStatus], references: [dbId], map: "spontaneous_absence_status_fk")

  // Relaci√≥n inversa con Justification
  justifications Justification? @relation("Spontaneous_Absence_Justification")
}

model Justification {
  absenceId String @id @map("absence_id")
  description String @map("description")
  media Json? @map("media")
  uploadedAat DateTime @map("uploaded_at")
  comments String? @map("comments")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  // Reation with Informal_Absence table
  informal_absence Informal_Absence? @relation("Informal_Absence_Justification", fields: [absenceId], references: [absenceId], map: "informal_absence_justification_fk")
  // Relation with Spontaneous_Absence table
  spontaneous_absence Spontaneous_Absence? @relation("Spontaneous_Absence_Justification", fields: [absenceId], references: [absenceId], map: "spontaneous_absence_justification_fk")
}

